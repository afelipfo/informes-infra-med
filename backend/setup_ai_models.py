#!/usr/bin/env python3
"""
Script de configuraci√≥n para modelos de IA
Descarga e instala los modelos necesarios para el sistema de IA inteligente
"""

import subprocess
import sys
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run_command(command, description):
    """Ejecutar comando y manejar errores"""
    logger.info(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        logger.info(f"‚úÖ {description} completado exitosamente")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Error en {description}: {e}")
        logger.error(f"Salida de error: {e.stderr}")
        return False

def setup_ai_models():
    """Configurar todos los modelos de IA necesarios"""
    logger.info("üöÄ Iniciando configuraci√≥n de modelos de IA...")
    
    # Verificar Python y pip
    logger.info(f"üêç Python version: {sys.version}")
    
    # Comandos de instalaci√≥n
    commands = [
        ("pip install --upgrade pip", "Actualizando pip"),
        ("python -m spacy download es_core_news_sm", "Descargando modelo spaCy para espa√±ol"),
        ("python -c \"import nltk; nltk.download('vader_lexicon', quiet=True)\"", "Descargando l√©xico NLTK"),
        ("python -c \"import nltk; nltk.download('punkt', quiet=True)\"", "Descargando tokenizador NLTK"),
        ("python -c \"import nltk; nltk.download('stopwords', quiet=True)\"", "Descargando stopwords NLTK"),
    ]
    
    success_count = 0
    for command, description in commands:
        if run_command(command, description):
            success_count += 1
    
    logger.info(f"üìä Configuraci√≥n completada: {success_count}/{len(commands)} comandos exitosos")
    
    if success_count == len(commands):
        logger.info("üéâ ¬°Todos los modelos de IA han sido configurados exitosamente!")
        return True
    else:
        logger.warning("‚ö†Ô∏è Algunos modelos no se pudieron instalar. El sistema funcionar√° con capacidades limitadas.")
        return False

def verify_installation():
    """Verificar que los modelos se instalaron correctamente"""
    logger.info("üîç Verificando instalaci√≥n de modelos...")
    
    try:
        import spacy
        nlp = spacy.load("es_core_news_sm")
        logger.info("‚úÖ Modelo spaCy verificado")
    except Exception as e:
        logger.error(f"‚ùå Error verificando spaCy: {e}")
        return False
    
    try:
        import nltk
        from nltk.sentiment import SentimentIntensityAnalyzer
        analyzer = SentimentIntensityAnalyzer()
        logger.info("‚úÖ NLTK verificado")
    except Exception as e:
        logger.error(f"‚ùå Error verificando NLTK: {e}")
        return False
    
    try:
        import sklearn
        import numpy
        import pandas
        logger.info("‚úÖ Librer√≠as de ML verificadas")
    except Exception as e:
        logger.error(f"‚ùå Error verificando librer√≠as ML: {e}")
        return False
    
    logger.info("üéâ Verificaci√≥n completada exitosamente")
    return True

def main():
    """Funci√≥n principal"""
    logger.info("=" * 60)
    logger.info("ü§ñ CONFIGURADOR DE MODELOS DE IA")
    logger.info("Sistema de Informes de Infraestructura - Medell√≠n")
    logger.info("=" * 60)
    
    # Configurar modelos
    if setup_ai_models():
        # Verificar instalaci√≥n
        if verify_installation():
            logger.info("üéØ Configuraci√≥n completada exitosamente")
            logger.info("El sistema de IA est√° listo para usar")
        else:
            logger.error("‚ùå Error en la verificaci√≥n de instalaci√≥n")
            sys.exit(1)
    else:
        logger.error("‚ùå Error en la configuraci√≥n de modelos")
        sys.exit(1)

if __name__ == "__main__":
    main()
